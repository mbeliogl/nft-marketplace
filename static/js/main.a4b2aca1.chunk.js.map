{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","App","_Component","props","_this","classCallCheck","possibleConstructorReturn","mint","kryptoBird","contract","methods","send","from","account","once","receipt","setState","kryptoBirdz","concat","toConsumableArray","totalSupply","inherits","createClass","_componentDidMount","asyncToGenerator","_callee","_context","loadWeb3","loadBlockChainData","apply","arguments","_loadWeb","_callee2","provider","_context2","detectEthereumProvider","console","log","window","web3","Web3","_loadBlockChainData","_callee3","accounts","networkId","networkData","abi","address","KB","_context3","ethereum","request","eth","net","getId","KryptoBird","networks","Contract","alert","_this2","react_default","a","createElement","className","style","color","role","opacity","onSubmit","event","preventDefault","placeholder","ref","input","map","mdb_react_ui_kit_esm","maxWidth","src","position","height","marginRight","href","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a4b2aca1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Web3 from 'web3';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport KryptoBird from '../abis/KryptoBird.json';\nimport {MDBCard, MDBCardBody, MDBCardText, MDBCardTitle, MDBCardImage, MDBBtn} from 'mdb-react-ui-kit';\nimport './App.css';\n\nclass App extends Component {\n\n    //checking if the web3 provider is accessible \n    async componentDidMount(){\n        await this.loadWeb3();\n        await this.loadBlockChainData();\n    }\n\n    //first step is detecting an ethereum provider \n    async loadWeb3() {\n        const provider = await detectEthereumProvider();\n\n        //checking for modern browsers \n        //setting provider for page (window)\n        if(provider){\n            console.log(\"ETH Wallet is Connected\");\n            window.web3 = new Web3(provider);\n        } else{\n            console.log(\"No ETH Wallet Detected\")\n        }\n    }\n\n    async loadBlockChainData() {\n        const web3 = window.web3; \n        const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n        this.setState({account: accounts[0]});\n\n        //***loading contract data to front end***\n        const networkId = await web3.eth.net.getId();\n        const networkData = KryptoBird.networks[networkId]; //from ABI\n\n        //sett interface (abi) and address \n        //setting contract as a variable using abi and address \n        if(networkData) {\n            const abi = KryptoBird.abi;\n            const address = networkData.address;\n            const contract = new web3.eth.Contract(abi, address);\n            this.setState({contract});\n\n            //call totalSupply() of KyrptoBirdz \n            const totalSupply = await contract.methods.totalSupply().call();\n            this.setState({totalSupply})\n            console.log(this.state.totalSupply)\n\n            //array to keep track of tokens. Loading our KryptoBirdz on front end \n            //updating the state array\n            for(let i = 1; i <= totalSupply; i++){\n                const KB = await contract.methods.kryptoBirdz(i-1).call();\n                \n                //using a spread operator '...'\n                this.setState({\n                    kryptoBirdz: [...this.state.kryptoBirdz, KB] \n                })\n            }\n        } else{\n            window.alert(\"ERROR: Smart Contract Not Deployed!\")\n        }\n    }\n\n    //minting function requires the from: address \n    mint = (kryptoBird) => {\n        this.state.contract.methods.mint(kryptoBird).send({from: this.state.account})\n        .once('receipt', (receipt) =>{ //we want this to execute once and sing off immediately\n            this.setState({\n                kryptoBirdz: [...this.state.kryptoBirdz, kryptoBird] \n\n            })\n    })\n    }\n\n    //initializing constructor to set states of the contract \n    constructor(props) {\n        super(props); //allows entire component to access the props of parent class with this.props \n        this.state = {\n            account: '',\n            contract: null, \n            totalSupply: 0,\n            kryptoBirdz: []\n        }\n    }\n\n    render() {\n        return (\n\n            <div className=\"container-filled\">\n                {console.log(this.state.kryptoBirdz)}\n                <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n                <div className=\"navbar-brand col-sm-3 col-md-3 mr-0\" style={{color: 'white'}}>\n                    KryptoBirdz NFT\n                </div>\n                \n                <ul className=\"navbar-nav px-3\">\n                    <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n                        <small className=\"text-white\"> Account: {this.state.account}</small>\n                    </li>\n                </ul>\n\n                </nav>\n\n                <div className=\"container-fluid mt-top-1\">\n                    <div className=\"row\">\n                        <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n                            <div className=\"content mr-auto ml-auto\" style={{opacity: 0.8}}>\n                                <h1 style={{color: 'black'}}>KryptoBirdz NFT Marketplace</h1>\n\n                                <form onSubmit={(event)=>{\n                                    event.preventDefault();\n                                    const kryptoBird = this.kryptoBird.value;\n                                    this.mint(kryptoBird);\n                                }}>\n\n                                    <input \n                                        type=\"text\" placeholder=\"Add a file location\" className=\"form-control mb-1\"\n                                        ref={(input) => this.kryptoBird = input}\n                                    />\n                                    <input type=\"submit\" className=\"btn btn-primary btn-black\" value=\"MINT\"/>\n\n                                </form>\n\n                            </div>\n                        </main>\n                    </div>\n                        <hr/>\n\n                        <div className=\"row text-center\">\n                            {this.state.kryptoBirdz.map((kryptoBird, key) => {\n                                return(\n                                    <div>\n                                        <div>\n                                            <MDBCard className=\"token img\" style={{maxWidth: \"22rem\"}}>\n                                                <MDBCardImage src={kryptoBird} position=\"top\" height=\"250rem\" style={{marginRight: \"4px\"}} />\n                                                <MDBCardBody>\n                                                    <MDBCardTitle> KryptoBirdz </MDBCardTitle>\n                                                    <MDBCardText> KryptoBirdz are 20 cool creatures from the planet Tralfamadore. \n                                                        They are unique as there is only one of each bird. \n                                                        And each bird can only be owned by a single individual on the ETH blockchain. </MDBCardText>\n                                                    <MDBBtn href={kryptoBird}> Download </MDBBtn>\n                                                </MDBCardBody>\n                                            </MDBCard>\n\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n\n\n                        </div>\n\n\n\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default App; \n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}